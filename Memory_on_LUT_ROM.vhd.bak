library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

use IEEE.NUMERIC_STD.ALL;

entity Memory_on_LUT_ROM is
	port (
		CLK			: in std_logic;
		Enable		: in std_logic;
		Counts		: in std_logic_vector(17 downto 0);
		Output		: out std_logic
	);
end Memory_on_LUT_ROM;

architecture rtl of Memory_on_LUT_ROM is
		
   constant Counter_bits 	: natural := 18;	
	signal clk_t 				: std_logic;
	signal Fall 				: std_logic	:= '0';
	signal Rise 				: std_logic	:= '0';
   signal Counter 			: unsigned((Counter_bits - 1) downto 0) := (others => '0');
	signal Counts_t			: unsigned((Counter_bits - 1) downto 0) := (others => '0');
	signal Out_t				: std_logic := '0';
	signal state 				: state_type := disable_count;
	
	
--	COMPONENT Frequency_divider  
--		PORT ( 
--					CLK			: in std_logic;
--					Enable		: in std_logic;
--					Counts		: in std_logic_vector(17 downto 0);
--					Output		: out std_logic
--			); 
--	END COMPONENT ; 
	
	COMPONENT SinglePortROM  
		PORT ( 
					address		: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
					clock		: IN STD_LOGIC  := '1';
					q		: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
			); 
	END COMPONENT ; 
begin

		SinglePortROM_module  : SinglePortROM  
    PORT MAP ( 
      address   => address_t  ,
      clock   => clk_t  ,
      q   => data_t  
		);
		
		clk_t <= CLK;
		
	--Main process with counter
	Count_proc : process (clk_t)
	begin
		if rising_edge(clk_t) then
		
		end if;	
	
end rtl;